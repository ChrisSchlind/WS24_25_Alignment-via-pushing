--------------------------------------------------------------------------------------------------------
#                                           ToDo List
--------------------------------------------------------------------------------------------------------
## Priority 1 (sehr hoch)

- Reward: testen ob "Reward: Distance-based reward of TCP to object" auch bei Multi-Obj gut

- Reward: IOU von Christoph übernehmen/verbessern

- Überlegen ob "Multi-Training" noch irgendeine Relvanz hat

- logger.debug("Resampling due to zero rewards.") - Timeout nach 100 versuchten bufferlesen MUSS GETESTET WERDEN, funktioniert unter umständen nicht/vmtl nicht (zum Testen, zb Robot_mvt auf 0 setzten, dann ganz schnell machbar)

- Größeres Netz?!?

## Priority 2

- bei "absolut_movement == True", eventuell X und Y richtung vertauscht?!? RoboterX = ObjY und umgekehrt!   action[0] = 2 * ((obj_pose.translation[0] - self.env.movement_bounds[0][0]) / x_range) - 1         action[1] = 2 * ((obj_pose.translation[1] - self.env.movement_bounds[1][0]) / y_range) - 1

- Netz-Gewichte zwischenspeichern & vorbereiten, dass bei späteren trainings darauf basiert aufgebaut werden kann?

- Beim Modelle zwischenspeichern aufpassen, dass man nichts gute alte Netze nicht überschrieben werden, vllt beim normalen Speichern jeweils mit Uhrzeit/Tag-Namen-Ordner arbeiten, und dann einen "Best"-Ordner pflegen

- Entfernen der Dynamischen Zügezahl, ist unnötig unübersichtlich


## Priority 3
- Graue und Schwarze Objekte abfangen, damit kein Problem mit "TCP grau" oder "Unterlagen-Schwarz"

- Multi-Simulation? (mehrere environments gleichzeitig laufen lassen und Buffer füttern?)

- Künstlichen positiven Reward für Bewegungen in falsche Richtung entfernen

- Original ReplayBuffer Klasse und train Funktion in DQNAgent entfernen


## Priority 4 (optional)



--------------------------------------------------------------------------------------------------------
#                                            Erledigt
--------------------------------------------------------------------------------------------------------
- logger prints abhängig von "debug" machen
- Unser environment (alles wo grasp draufsteht, löschen) säubern
- Ein einziges Dockerfile erstellen, das auf TF base besteht, und trotzdem alles von pybullet kann/hat
- Masse, Reibung und Trägheitstensoren anpassen
- Checken, ob TCP perfekt senkrecht & nicht driftet - fixed


